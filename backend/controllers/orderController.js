import orderModel from "../models/orderModel.js";
import userModel from "../models/userModel.js";
import productModel from "../models/productModel.js";

const currency = "VND";
const deliveryCharge = 30000;

// H√†m sinh m√£ ƒë∆°n h√†ng ng·∫´u nhi√™n, c√≥ th·ªÉ thay b·∫±ng generator th·ª±c t·∫ø sau n√†y
const generateOrderCode = () => {
  return "ORD-" + Math.random().toString(36).substr(2, 9).toUpperCase();
};

// API ƒë·∫∑t h√†ng (COD)
const placeOrder = async (req, res) => {
  try {
    const userId = req.userId;
    const { items, amount, address, paymentMethod, payment } = req.body;

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!Array.isArray(items) || items.length === 0) {
      return res
        .status(400)
        .json({ success: false, message: "Danh s√°ch s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá!" });
    }
    if (typeof address !== "object" || !address.email || !address.dienThoai) {
      return res
        .status(400)
        .json({ success: false, message: "ƒê·ªãa ch·ªâ giao h√†ng kh√¥ng h·ª£p l·ªá!" });
    }
    if (!amount || isNaN(amount)) {
      return res
        .status(400)
        .json({ success: false, message: "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!" });
    }
    if (!paymentMethod || typeof paymentMethod !== "string") {
      return res
        .status(400)
        .json({
          success: false,
          message: "Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá!",
        });
    }

    const user = await userModel.findById(userId);
    if (!user) {
      return res
        .status(404)
        .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });
    }

    const validMethods = ["cod", "napas"];
    if (!validMethods.includes(paymentMethod)) {
      return res
        .status(400)
        .json({
          success: false,
          message: "Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá.",
        });
    }

    // T√≠nh t·ªïng ti·ªÅn th·ª±c t·∫ø v√† x√°c minh s·∫£n ph·∫©m
    let totalAmount = 0;
    const validItems = [];

    for (const item of items) {
      const product = await productModel.findById(item._id);
      if (!product) {
        return res
          .status(400)
          .json({
            success: false,
            message: `S·∫£n ph·∫©m ${item._id} kh√¥ng t·ªìn t·∫°i.`,
          });
      }
      if (item.quantity <= 0) {
        return res
          .status(400)
          .json({
            success: false,
            message: `S·ªë l∆∞·ª£ng s·∫£n ph·∫©m ${item._id} kh√¥ng h·ª£p l·ªá.`,
          });
      }

      totalAmount += product.price * item.quantity;
      validItems.push({
        productId: item._id,
        size: item.size,
        quantity: item.quantity,
      });
    }

    if (totalAmount + deliveryCharge !== amount) {
      return res.status(400).json({
        success: false,
        message: `T·ªïng ti·ªÅn kh√¥ng kh·ªõp. Nh·∫≠n: ${amount}, D·ª± ki·∫øn: ${
          totalAmount + deliveryCharge
        }`,
      });
    }

    // Ki·ªÉm tra c√°c tr∆∞·ªùng ƒë·ªãa ch·ªâ b·∫Øt bu·ªôc
    const requiredFields = [
      "ten",
      "ho",
      "email",
      "duongSonha",
      "phuongXa",
      "dienThoai",
    ];
    for (const field of requiredFields) {
      if (!address[field]) {
        return res
          .status(400)
          .json({ success: false, message: `Thi·∫øu tr∆∞·ªùng ƒë·ªãa ch·ªâ: ${field}` });
      }
    }

    // Validate email v√† s·ªë ƒëi·ªán tho·∫°i
    if (!/^\d{10}$/.test(address.dienThoai)) {
      return res
        .status(400)
        .json({ success: false, message: "S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10 ch·ªØ s·ªë." });
    }

    if (!/\S+@\S+\.\S+/.test(address.email)) {
      return res
        .status(400)
        .json({ success: false, message: "Email kh√¥ng h·ª£p l·ªá." });
    }

    //  H·ªá th·ªëng ch∆∞a h·ªó tr·ª£ Napas
    if (paymentMethod === "napas") {
      return res
        .status(501)
        .json({
          success: false,
          message: "Ph∆∞∆°ng th·ª©c thanh to√°n Napas ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£.",
        });
    }

    // T·∫°o ƒë∆°n h√†ng m·ªõi
    const orderData = {
      userId,
      items: validItems,
      address,
      amount,
      paymentMethod,
      payment: payment ?? false,
      date: Date.now(),
      orderCode: generateOrderCode(),
      status: "ƒê√£ ƒë·∫∑t h√†ng",
    };

    const newOrder = new orderModel(orderData);
    await newOrder.save();

    // üßπ Xo√° s·∫£n ph·∫©m ƒë√£ ƒë·∫∑t kh·ªèi gi·ªè h√†ng
    let cartData = user.cartData || {};
    for (const item of items) {
      if (cartData[item._id]) {
        delete cartData[item._id][item.size];
        if (Object.keys(cartData[item._id]).length === 0) {
          delete cartData[item._id];
        }
      }
    }
    await userModel.findByIdAndUpdate(userId, { cartData });

    res.json({
      success: true,
      message: "ƒê√£ ƒë·∫∑t h√†ng",
      orderId: newOrder._id,
      updatedCartData: cartData,
    });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
};

// L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng (hi·ªÉn th·ªã l·ªãch s·ª≠ mua)
const userOrders = async (req, res) => {
  try {
    const userId = req.userId;
    const orders = await orderModel
      .find({ userId })
      .populate("items.productId")
      .sort({ date: -1 });

    // ƒê·ªãnh d·∫°ng l·∫°i d·ªØ li·ªáu ƒë·ªÉ client d·ªÖ x·ª≠ l√Ω
    const formattedOrders = orders.map((order) => ({
      _id: order._id,
      items: order.items.map((item) => ({
        productId: item.productId._id,
        name: item.productId.name,
        image: item.productId.image,
        price: item.productId.price,
        size: item.size,
        quantity: item.quantity,
      })),
      address: order.address,
      amount: order.amount,
      status: order.status,
      payment: order.payment,
      paymentMethod: order.paymentMethod,
      date: order.date,
      orderCode: order.orderCode,
    }));

    res.json({ success: true, orders: formattedOrders });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
};

// D√†nh cho admin: l·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng
const allOrders = async (req, res) => {
  try {
    const orders = await orderModel
      .find({})
      .populate("items.productId")
      .sort({ date: -1 });

    const formattedOrders = orders.map((order) => ({
      _id: order._id,
      items: order.items.map((item) => ({
        productId: item.productId._id,
        name: item.productId.name,
        image: item.productId.image,
        price: item.productId.price,
        size: item.size,
        quantity: item.quantity,
      })),
      address: order.address,
      amount: order.amount,
      status: order.status,
      payment: order.payment,
      paymentMethod: order.paymentMethod,
      date: order.date,
      orderCode: order.orderCode,
    }));

    res.json({ success: true, orders: formattedOrders });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
};

// Admin c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
const updateStatus = async (req, res) => {
  try {
    const { orderId, status } = req.body;
    const allowedStatuses = [
      "ƒê√£ ƒë·∫∑t h√†ng",
      "Ch·ªù ƒë√≥ng g√≥i",
      "ƒê√£ g·ª≠i h√†ng",
      "ƒêang giao h√†ng",
      "ƒê√£ giao h√†ng",
      "ƒê√£ hu·ª∑",
    ];

    if (!allowedStatuses.includes(status)) {
      return res
        .status(400)
        .json({ success: false, message: "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá" });
    }

    await orderModel.findByIdAndUpdate(orderId, { status });
    res.json({ success: true, message: "ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i" });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
};

//  Xo√° ƒë∆°n h√†ng
const deleteOrder = async (req, res) => {
  try {
    const { orderId } = req.body;
    await orderModel.findByIdAndDelete(orderId);
    res.json({ success: true, message: "ƒê√£ x√≥a ƒë∆°n h√†ng" });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
};

//  C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ giao h√†ng
const updateOrderAddress = async (req, res) => {
  try {
    const { orderId, newAddress } = req.body;
    await orderModel.findByIdAndUpdate(orderId, { address: newAddress });
    res.json({ success: true, message: "C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ th√†nh c√¥ng" });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
};

//  Hu·ª∑ ƒë∆°n h√†ng (ch·ªâ khi tr·∫°ng th√°i l√† "ƒê√£ ƒë·∫∑t h√†ng" ho·∫∑c "Ch·ªù ƒë√≥ng g√≥i")
const cancelOrder = async (req, res) => {
  try {
    const order = await orderModel.findById(req.params.id);
    if (!order) {
      return res
        .status(404)
        .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
    }

    if (!["ƒê√£ ƒë·∫∑t h√†ng", "Ch·ªù ƒë√≥ng g√≥i"].includes(order.status)) {
      return res
        .status(400)
        .json({
          success: false,
          message: "Kh√¥ng th·ªÉ hu·ª∑ ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i n√†y",
        });
    }

    order.status = "ƒê√£ hu·ª∑";
    await order.save();
    res.json({ success: true, message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c hu·ª∑" });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
};

export {
  placeOrder,
  allOrders,
  userOrders,
  updateStatus,
  deleteOrder,
  updateOrderAddress,
  cancelOrder,
};
